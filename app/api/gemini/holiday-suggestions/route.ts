import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { country, region, months = 3 } = await request.json()

    if (!process.env.GEMINI_API_KEY) {
      console.log('Gemini API key not configured, returning mock data')
      return NextResponse.json({ 
        holidays: getMockHolidays() 
      })
    }

    const prompt = `You are a holiday awareness assistant. Provide information about upcoming holidays and long weekends for ${country}${region ? `, ${region}` : ''} for the next ${months} months.

    For each holiday, provide:
    1. Holiday name
    2. Date (YYYY-MM-DD format)
    3. Type (National Holiday, Federal Holiday, Religious Holiday, etc.)
    4. Brief description
    5. 3-5 activity suggestions for that holiday
    6. Whether it creates a long weekend (true/false)
    7. Number of days off (if it's a long weekend)

    Focus on holidays that create long weekends or extended breaks that people can plan activities for.
    Include both official holidays and popular observances.

    Return the response as a JSON array with this structure:
    [
      {
        "name": "Holiday Name",
        "date": "2024-01-01",
        "type": "National Holiday",
        "description": "Brief description of the holiday",
        "suggestions": ["Activity 1", "Activity 2", "Activity 3"],
        "isLongWeekend": true,
        "daysOff": 3
      }
    ]

    Current date: ${new Date().toISOString().split('T')[0]}`

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          }
        })
      }
    )

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status}`)
    }

    const data = await response.json()
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text

    if (!generatedText) {
      throw new Error('No content generated by Gemini API')
    }

    // Parse the JSON response from Gemini
    let holidays
    try {
      // Extract JSON from the response (in case there's extra text)
      const jsonMatch = generatedText.match(/\[[\s\S]*\]/)
      if (jsonMatch) {
        holidays = JSON.parse(jsonMatch[0])
      } else {
        holidays = JSON.parse(generatedText)
      }
    } catch (parseError) {
      console.error('Error parsing Gemini response:', parseError)
      console.error('Raw response:', generatedText)
      
      // Fallback to mock data if parsing fails
      holidays = getMockHolidays()
    }

    return NextResponse.json({ holidays })

  } catch (error) {
    console.error('Error in holiday suggestions API:', error)
    
    // Always return mock data as fallback instead of error
    return NextResponse.json({ 
      holidays: getMockHolidays() 
    })
  }
}

function getMockHolidays() {
  const today = new Date()
  const currentYear = today.getFullYear()
  
  // Generate upcoming dates
  const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000)
  const nextMonth = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000)
  const twoMonths = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000)
  
  return [
    {
      name: "Upcoming Long Weekend",
      date: nextWeek.toISOString().split('T')[0],
      type: "Mock Holiday",
      description: "Perfect time to plan a relaxing getaway or fun activities",
      suggestions: ["Plan a weekend trip", "Try a new restaurant", "Visit a local attraction", "Have a movie marathon", "Go hiking"],
      isLongWeekend: true,
      daysOff: 3
    },
    {
      name: "Spring Break",
      date: nextMonth.toISOString().split('T')[0],
      type: "Holiday Period",
      description: "Great opportunity for a longer vacation or special activities",
      suggestions: ["Plan a vacation", "Visit family", "Try new hobbies", "Explore your city", "Attend events"],
      isLongWeekend: true,
      daysOff: 4
    },
    {
      name: "Summer Planning",
      date: twoMonths.toISOString().split('T')[0],
      type: "Planning Period",
      description: "Start planning your summer adventures and activities",
      suggestions: ["Book summer trips", "Plan outdoor activities", "Join summer programs", "Prepare for adventures", "Set summer goals"],
      isLongWeekend: true,
      daysOff: 3
    }
  ]
}
